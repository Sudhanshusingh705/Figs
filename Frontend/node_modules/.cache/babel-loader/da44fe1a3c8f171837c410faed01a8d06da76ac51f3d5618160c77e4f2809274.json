{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Sudha\\\\OneDrive\\\\Desktop\\\\Figs\\\\Frontend\\\\src\\\\components\\\\ProtectedRoute.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { Navigate } from 'react-router-dom';\nimport useAuth from '../hooks/useAuth';\nimport Loading from './Loading';\n\n/**\r\n * Protected Route component for authentication and authorization\r\n * \r\n * Redirects to login page if user is not authenticated\r\n * For admin routes, also checks if user has admin role\r\n * \r\n * @param {Object} props\r\n * @param {boolean} props.adminRequired - Whether admin role is required\r\n * @param {React.ReactNode} props.children - Child components to render\r\n * @returns {React.ReactNode}\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProtectedRoute = ({\n  adminRequired = false,\n  children\n}) => {\n  _s();\n  const {\n    user,\n    loading\n  } = useAuth();\n\n  // Show loading spinner while checking authentication\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Check if user is authenticated (has an id or email)\n  const isAuthenticated = user && (user.id || user.email || user._id);\n\n  // Redirect to login if not authenticated\n  if (!isAuthenticated) {\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 12\n    }, this);\n  }\n\n  // For admin routes, check if user has admin role\n  if (adminRequired && user.role !== 'admin') {\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 12\n    }, this);\n  }\n\n  // User is authenticated and authorized\n  return children;\n};\n_s(ProtectedRoute, \"EmJkapf7qiLC5Br5eCoEq4veZes=\", false, function () {\n  return [useAuth];\n});\n_c = ProtectedRoute;\nexport default ProtectedRoute;\nvar _c;\n$RefreshReg$(_c, \"ProtectedRoute\");","map":{"version":3,"names":["React","Navigate","useAuth","Loading","jsxDEV","_jsxDEV","ProtectedRoute","adminRequired","children","_s","user","loading","fileName","_jsxFileName","lineNumber","columnNumber","isAuthenticated","id","email","_id","to","role","_c","$RefreshReg$"],"sources":["C:/Users/Sudha/OneDrive/Desktop/Figs/Frontend/src/components/ProtectedRoute.js"],"sourcesContent":["import React from 'react';\r\nimport { Navigate } from 'react-router-dom';\r\nimport useAuth from '../hooks/useAuth';\r\nimport Loading from './Loading';\r\n\r\n/**\r\n * Protected Route component for authentication and authorization\r\n * \r\n * Redirects to login page if user is not authenticated\r\n * For admin routes, also checks if user has admin role\r\n * \r\n * @param {Object} props\r\n * @param {boolean} props.adminRequired - Whether admin role is required\r\n * @param {React.ReactNode} props.children - Child components to render\r\n * @returns {React.ReactNode}\r\n */\r\nconst ProtectedRoute = ({ adminRequired = false, children }) => {\r\n  const { user, loading } = useAuth();\r\n  \r\n  // Show loading spinner while checking authentication\r\n  if (loading) {\r\n    return <Loading />;\r\n  }\r\n  \r\n  // Check if user is authenticated (has an id or email)\r\n  const isAuthenticated = user && (user.id || user.email || user._id);\r\n  \r\n  // Redirect to login if not authenticated\r\n  if (!isAuthenticated) {\r\n    return <Navigate to=\"/login\" />;\r\n  }\r\n  \r\n  // For admin routes, check if user has admin role\r\n  if (adminRequired && user.role !== 'admin') {\r\n    return <Navigate to=\"/dashboard\" />;\r\n  }\r\n  \r\n  // User is authenticated and authorized\r\n  return children;\r\n};\r\n\r\nexport default ProtectedRoute; "],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,QAAQ,kBAAkB;AAC3C,OAAOC,OAAO,MAAM,kBAAkB;AACtC,OAAOC,OAAO,MAAM,WAAW;;AAE/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA,SAAAC,MAAA,IAAAC,OAAA;AAWA,MAAMC,cAAc,GAAGA,CAAC;EAAEC,aAAa,GAAG,KAAK;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC9D,MAAM;IAAEC,IAAI;IAAEC;EAAQ,CAAC,GAAGT,OAAO,CAAC,CAAC;;EAEnC;EACA,IAAIS,OAAO,EAAE;IACX,oBAAON,OAAA,CAACF,OAAO;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACpB;;EAEA;EACA,MAAMC,eAAe,GAAGN,IAAI,KAAKA,IAAI,CAACO,EAAE,IAAIP,IAAI,CAACQ,KAAK,IAAIR,IAAI,CAACS,GAAG,CAAC;;EAEnE;EACA,IAAI,CAACH,eAAe,EAAE;IACpB,oBAAOX,OAAA,CAACJ,QAAQ;MAACmB,EAAE,EAAC;IAAQ;MAAAR,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACjC;;EAEA;EACA,IAAIR,aAAa,IAAIG,IAAI,CAACW,IAAI,KAAK,OAAO,EAAE;IAC1C,oBAAOhB,OAAA,CAACJ,QAAQ;MAACmB,EAAE,EAAC;IAAY;MAAAR,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACrC;;EAEA;EACA,OAAOP,QAAQ;AACjB,CAAC;AAACC,EAAA,CAvBIH,cAAc;EAAA,QACQJ,OAAO;AAAA;AAAAoB,EAAA,GAD7BhB,cAAc;AAyBpB,eAAeA,cAAc;AAAC,IAAAgB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}