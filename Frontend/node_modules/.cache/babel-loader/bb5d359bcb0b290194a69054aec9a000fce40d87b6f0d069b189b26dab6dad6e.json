{"ast":null,"code":"import axios from 'axios';\n\n// Base API URL - change this to your actual backend URL\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\n// Create an axios instance with default config\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add request interceptor to include auth token in all requests\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('auth_token');\n  if (token) {\n    config.headers['Authorization'] = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Add response interceptor to handle common errors\napi.interceptors.response.use(response => response, error => {\n  // Handle 401 Unauthorized errors (token expired, etc.)\n  if (error.response && error.response.status === 401) {\n    // Clear local storage and redirect to login\n    localStorage.removeItem('auth_token');\n    localStorage.removeItem('user');\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\nconst apiService = {\n  // Auth endpoints\n  auth: {\n    login: async credentials => {\n      const response = await api.post('/auth/login', credentials);\n      if (response.data.token) {\n        localStorage.setItem('auth_token', response.data.token);\n        localStorage.setItem('user', JSON.stringify(response.data.user));\n      }\n      return response.data;\n    },\n    register: async userData => {\n      const response = await api.post('/auth/register', userData);\n      return response.data;\n    },\n    forgotPassword: async email => {\n      const response = await api.post('/auth/forgot-password', {\n        email\n      });\n      return response.data;\n    },\n    resetPassword: async (token, newPassword) => {\n      const response = await api.post('/auth/reset-password', {\n        token,\n        newPassword\n      });\n      return response.data;\n    },\n    logout: () => {\n      localStorage.removeItem('auth_token');\n      localStorage.removeItem('user');\n    },\n    getCurrentUser: () => {\n      const user = localStorage.getItem('user');\n      return user ? JSON.parse(user) : null;\n    },\n    getToken: () => {\n      return localStorage.getItem('auth_token');\n    },\n    isAuthenticated: () => {\n      return !!localStorage.getItem('auth_token');\n    }\n  },\n  // Quiz endpoints\n  quizzes: {\n    getAll: async params => {\n      const response = await api.get('/quizzes', {\n        params\n      });\n      return response.data;\n    },\n    getFeatured: async () => {\n      const response = await api.get('/quizzes/featured');\n      return response.data;\n    },\n    getById: async id => {\n      const response = await api.get(`/quizzes/${id}`);\n      return response.data;\n    },\n    create: async quizData => {\n      const response = await api.post('/quizzes', quizData);\n      return response.data;\n    },\n    update: async (id, quizData) => {\n      const response = await api.put(`/quizzes/${id}`, quizData);\n      return response.data;\n    },\n    delete: async id => {\n      const response = await api.delete(`/quizzes/${id}`);\n      return response.data;\n    },\n    togglePublish: async (id, status) => {\n      const response = await api.patch(`/quizzes/${id}/publish`, {\n        published: status\n      });\n      return response.data;\n    },\n    // Question management\n    getQuestions: async quizId => {\n      const response = await api.get(`/quizzes/${quizId}/questions`);\n      return response.data;\n    },\n    addQuestion: async (quizId, questionData) => {\n      const response = await api.post(`/quizzes/${quizId}/questions`, questionData);\n      return response.data;\n    },\n    updateQuestion: async (quizId, questionId, questionData) => {\n      const response = await api.put(`/quizzes/${quizId}/questions/${questionId}`, questionData);\n      return response.data;\n    },\n    deleteQuestion: async (quizId, questionId) => {\n      const response = await api.delete(`/quizzes/${quizId}/questions/${questionId}`);\n      return response.data;\n    },\n    // Taking quizzes\n    startQuiz: async quizId => {\n      const response = await api.post(`/quizzes/${quizId}/start`);\n      return response.data;\n    },\n    submitAnswer: async (quizId, attemptId, questionId, answer) => {\n      const response = await api.post(`/quizzes/${quizId}/attempts/${attemptId}/answer`, {\n        questionId,\n        answer\n      });\n      return response.data;\n    },\n    finishQuiz: async (quizId, attemptId) => {\n      const response = await api.post(`/quizzes/${quizId}/attempts/${attemptId}/finish`);\n      return response.data;\n    }\n  },\n  // Mock Test endpoints\n  mockTests: {\n    getAll: async params => {\n      const response = await api.get('/mock-tests', {\n        params\n      });\n      return response.data;\n    },\n    getFeatured: async () => {\n      const response = await api.get('/mock-tests/featured');\n      return response.data;\n    },\n    getById: async id => {\n      const response = await api.get(`/mock-tests/${id}`);\n      return response.data;\n    },\n    create: async mockTestData => {\n      const response = await api.post('/mock-tests', mockTestData);\n      return response.data;\n    },\n    update: async (id, mockTestData) => {\n      const response = await api.put(`/mock-tests/${id}`, mockTestData);\n      return response.data;\n    },\n    delete: async id => {\n      const response = await api.delete(`/mock-tests/${id}`);\n      return response.data;\n    },\n    togglePublish: async (id, status) => {\n      const response = await api.patch(`/mock-tests/${id}/publish`, {\n        published: status\n      });\n      return response.data;\n    }\n  },\n  // Study Materials endpoints\n  studyMaterials: {\n    getAll: async params => {\n      const response = await api.get('/study-materials', {\n        params\n      });\n      return response.data;\n    },\n    getFeatured: async () => {\n      const response = await api.get('/study-materials/featured');\n      return response.data;\n    },\n    getById: async id => {\n      const response = await api.get(`/study-materials/${id}`);\n      return response.data;\n    },\n    create: async formData => {\n      // For file uploads, use formData\n      const response = await api.post('/study-materials', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      return response.data;\n    },\n    update: async (id, formData) => {\n      // For file uploads, use formData\n      const response = await api.put(`/study-materials/${id}`, formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      return response.data;\n    },\n    delete: async id => {\n      const response = await api.delete(`/study-materials/${id}`);\n      return response.data;\n    },\n    download: async id => {\n      const response = await api.get(`/study-materials/${id}/download`, {\n        responseType: 'blob'\n      });\n      return response.data;\n    }\n  },\n  // Course endpoints\n  courses: {\n    getAll: async params => {\n      const response = await api.get('/courses', {\n        params\n      });\n      return response.data;\n    },\n    getFeatured: async () => {\n      const response = await api.get('/courses/featured');\n      return response.data;\n    },\n    getById: async id => {\n      const response = await api.get(`/courses/${id}`);\n      return response.data;\n    },\n    create: async courseData => {\n      const response = await api.post('/courses', courseData);\n      return response.data;\n    },\n    update: async (id, courseData) => {\n      const response = await api.put(`/courses/${id}`, courseData);\n      return response.data;\n    },\n    delete: async id => {\n      const response = await api.delete(`/courses/${id}`);\n      return response.data;\n    },\n    togglePublish: async (id, status) => {\n      const response = await api.patch(`/courses/${id}/publish`, {\n        published: status\n      });\n      return response.data;\n    },\n    // Lesson management\n    getLessons: async courseId => {\n      const response = await api.get(`/courses/${courseId}/lessons`);\n      return response.data;\n    },\n    addLesson: async (courseId, lessonData) => {\n      const response = await api.post(`/courses/${courseId}/lessons`, lessonData);\n      return response.data;\n    },\n    updateLesson: async (courseId, lessonId, lessonData) => {\n      const response = await api.put(`/courses/${courseId}/lessons/${lessonId}`, lessonData);\n      return response.data;\n    },\n    deleteLesson: async (courseId, lessonId) => {\n      const response = await api.delete(`/courses/${courseId}/lessons/${lessonId}`);\n      return response.data;\n    },\n    // Enrollment\n    enroll: async courseId => {\n      const response = await api.post(`/courses/${courseId}/enroll`);\n      return response.data;\n    },\n    getEnrollments: async () => {\n      const response = await api.get('/user/enrollments');\n      return response.data;\n    }\n  },\n  // Blog endpoints\n  blogs: {\n    getAll: async params => {\n      const response = await api.get('/blogs', {\n        params\n      });\n      return response.data;\n    },\n    getFeatured: async () => {\n      const response = await api.get('/blogs/featured');\n      return response.data;\n    },\n    getById: async id => {\n      const response = await api.get(`/blogs/${id}`);\n      return response.data;\n    },\n    getBySlug: async slug => {\n      const response = await api.get(`/blogs/slug/${slug}`);\n      return response.data;\n    },\n    create: async formData => {\n      // For file uploads (featured image), use formData\n      const response = await api.post('/blogs', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      return response.data;\n    },\n    update: async (id, formData) => {\n      // For file uploads (featured image), use formData\n      const response = await api.put(`/blogs/${id}`, formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      return response.data;\n    },\n    delete: async id => {\n      const response = await api.delete(`/blogs/${id}`);\n      return response.data;\n    },\n    togglePublish: async (id, status) => {\n      const response = await api.patch(`/blogs/${id}/publish`, {\n        published: status\n      });\n      return response.data;\n    },\n    toggleFeatured: async (id, status) => {\n      const response = await api.patch(`/blogs/${id}/feature`, {\n        featured: status\n      });\n      return response.data;\n    }\n  },\n  // Article endpoints\n  articles: {\n    getAll: async params => {\n      const response = await api.get('/articles', {\n        params\n      });\n      return response.data;\n    },\n    getFeatured: async () => {\n      const response = await api.get('/articles/featured');\n      return response.data;\n    },\n    getById: async id => {\n      const response = await api.get(`/articles/${id}`);\n      return response.data;\n    },\n    getBySlug: async slug => {\n      const response = await api.get(`/articles/slug/${slug}`);\n      return response.data;\n    },\n    create: async formData => {\n      // For file uploads (featured image), use formData\n      const response = await api.post('/articles', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      return response.data;\n    },\n    update: async (id, formData) => {\n      // For file uploads (featured image), use formData\n      const response = await api.put(`/articles/${id}`, formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      return response.data;\n    },\n    delete: async id => {\n      const response = await api.delete(`/articles/${id}`);\n      return response.data;\n    },\n    togglePublish: async (id, status) => {\n      const response = await api.patch(`/articles/${id}/publish`, {\n        published: status\n      });\n      return response.data;\n    },\n    toggleFeatured: async (id, status) => {\n      const response = await api.patch(`/articles/${id}/feature`, {\n        featured: status\n      });\n      return response.data;\n    }\n  },\n  // User management\n  users: {\n    getAll: async params => {\n      const response = await api.get('/users', {\n        params\n      });\n      return response.data;\n    },\n    getById: async id => {\n      const response = await api.get(`/users/${id}`);\n      return response.data;\n    },\n    create: async userData => {\n      const response = await api.post('/users', userData);\n      return response.data;\n    },\n    update: async (id, userData) => {\n      const response = await api.put(`/users/${id}`, userData);\n      return response.data;\n    },\n    delete: async id => {\n      const response = await api.delete(`/users/${id}`);\n      return response.data;\n    },\n    updateProfile: async userData => {\n      const response = await api.put('/users/profile', userData);\n      return response.data;\n    },\n    changePassword: async passwords => {\n      const response = await api.put('/users/change-password', passwords);\n      return response.data;\n    }\n  },\n  // Dashboard endpoints\n  dashboard: {\n    getStats: async () => {\n      const response = await api.get('/dashboard/stats');\n      return response.data;\n    },\n    getAdminStats: async () => {\n      const response = await api.get('/dashboard/admin-stats');\n      return response.data;\n    },\n    getUserActivity: async () => {\n      const response = await api.get('/dashboard/user-activity');\n      return response.data;\n    },\n    getRecentContent: async () => {\n      const response = await api.get('/dashboard/recent-content');\n      return response.data;\n    }\n  },\n  // Home page content\n  home: {\n    getAllContent: async () => {\n      try {\n        const response = await api.get('/home/content');\n        return response.data;\n      } catch (error) {\n        console.error('Error fetching home content:', error);\n        // Return empty content structure on error\n        return {\n          blogs: [],\n          articles: [],\n          quizzes: [],\n          mockTests: [],\n          courses: [],\n          studyMaterials: []\n        };\n      }\n    }\n  }\n};\nexport default apiService;","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","error","Promise","reject","response","status","removeItem","window","location","href","apiService","auth","login","credentials","post","data","setItem","JSON","stringify","user","register","userData","forgotPassword","email","resetPassword","newPassword","logout","getCurrentUser","parse","getToken","isAuthenticated","quizzes","getAll","params","get","getFeatured","getById","id","quizData","update","put","delete","togglePublish","patch","published","getQuestions","quizId","addQuestion","questionData","updateQuestion","questionId","deleteQuestion","startQuiz","submitAnswer","attemptId","answer","finishQuiz","mockTests","mockTestData","studyMaterials","formData","download","responseType","courses","courseData","getLessons","courseId","addLesson","lessonData","updateLesson","lessonId","deleteLesson","enroll","getEnrollments","blogs","getBySlug","slug","toggleFeatured","featured","articles","users","updateProfile","changePassword","passwords","dashboard","getStats","getAdminStats","getUserActivity","getRecentContent","home","getAllContent","console"],"sources":["C:/Users/Sudha/OneDrive/Desktop/Figs/Frontend/src/services/apiService.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Base API URL - change this to your actual backend URL\r\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\r\n\r\n// Create an axios instance with default config\r\nconst api = axios.create({\r\n  baseURL: API_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Add request interceptor to include auth token in all requests\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('auth_token');\r\n    if (token) {\r\n      config.headers['Authorization'] = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Add response interceptor to handle common errors\r\napi.interceptors.response.use(\r\n  (response) => response,\r\n  (error) => {\r\n    // Handle 401 Unauthorized errors (token expired, etc.)\r\n    if (error.response && error.response.status === 401) {\r\n      // Clear local storage and redirect to login\r\n      localStorage.removeItem('auth_token');\r\n      localStorage.removeItem('user');\r\n      window.location.href = '/login';\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nconst apiService = {\r\n  // Auth endpoints\r\n  auth: {\r\n    login: async (credentials) => {\r\n      const response = await api.post('/auth/login', credentials);\r\n      if (response.data.token) {\r\n        localStorage.setItem('auth_token', response.data.token);\r\n        localStorage.setItem('user', JSON.stringify(response.data.user));\r\n      }\r\n      return response.data;\r\n    },\r\n    \r\n    register: async (userData) => {\r\n      const response = await api.post('/auth/register', userData);\r\n      return response.data;\r\n    },\r\n    \r\n    forgotPassword: async (email) => {\r\n      const response = await api.post('/auth/forgot-password', { email });\r\n      return response.data;\r\n    },\r\n    \r\n    resetPassword: async (token, newPassword) => {\r\n      const response = await api.post('/auth/reset-password', { token, newPassword });\r\n      return response.data;\r\n    },\r\n    \r\n    logout: () => {\r\n      localStorage.removeItem('auth_token');\r\n      localStorage.removeItem('user');\r\n    },\r\n    \r\n    getCurrentUser: () => {\r\n      const user = localStorage.getItem('user');\r\n      return user ? JSON.parse(user) : null;\r\n    },\r\n    \r\n    getToken: () => {\r\n      return localStorage.getItem('auth_token');\r\n    },\r\n    \r\n    isAuthenticated: () => {\r\n      return !!localStorage.getItem('auth_token');\r\n    }\r\n  },\r\n  \r\n  // Quiz endpoints\r\n  quizzes: {\r\n    getAll: async (params) => {\r\n      const response = await api.get('/quizzes', { params });\r\n      return response.data;\r\n    },\r\n    \r\n    getFeatured: async () => {\r\n      const response = await api.get('/quizzes/featured');\r\n      return response.data;\r\n    },\r\n    \r\n    getById: async (id) => {\r\n      const response = await api.get(`/quizzes/${id}`);\r\n      return response.data;\r\n    },\r\n    \r\n    create: async (quizData) => {\r\n      const response = await api.post('/quizzes', quizData);\r\n      return response.data;\r\n    },\r\n    \r\n    update: async (id, quizData) => {\r\n      const response = await api.put(`/quizzes/${id}`, quizData);\r\n      return response.data;\r\n    },\r\n    \r\n    delete: async (id) => {\r\n      const response = await api.delete(`/quizzes/${id}`);\r\n      return response.data;\r\n    },\r\n    \r\n    togglePublish: async (id, status) => {\r\n      const response = await api.patch(`/quizzes/${id}/publish`, { published: status });\r\n      return response.data;\r\n    },\r\n    \r\n    // Question management\r\n    getQuestions: async (quizId) => {\r\n      const response = await api.get(`/quizzes/${quizId}/questions`);\r\n      return response.data;\r\n    },\r\n    \r\n    addQuestion: async (quizId, questionData) => {\r\n      const response = await api.post(`/quizzes/${quizId}/questions`, questionData);\r\n      return response.data;\r\n    },\r\n    \r\n    updateQuestion: async (quizId, questionId, questionData) => {\r\n      const response = await api.put(`/quizzes/${quizId}/questions/${questionId}`, questionData);\r\n      return response.data;\r\n    },\r\n    \r\n    deleteQuestion: async (quizId, questionId) => {\r\n      const response = await api.delete(`/quizzes/${quizId}/questions/${questionId}`);\r\n      return response.data;\r\n    },\r\n    \r\n    // Taking quizzes\r\n    startQuiz: async (quizId) => {\r\n      const response = await api.post(`/quizzes/${quizId}/start`);\r\n      return response.data;\r\n    },\r\n    \r\n    submitAnswer: async (quizId, attemptId, questionId, answer) => {\r\n      const response = await api.post(`/quizzes/${quizId}/attempts/${attemptId}/answer`, {\r\n        questionId,\r\n        answer\r\n      });\r\n      return response.data;\r\n    },\r\n    \r\n    finishQuiz: async (quizId, attemptId) => {\r\n      const response = await api.post(`/quizzes/${quizId}/attempts/${attemptId}/finish`);\r\n      return response.data;\r\n    }\r\n  },\r\n  \r\n  // Mock Test endpoints\r\n  mockTests: {\r\n    getAll: async (params) => {\r\n      const response = await api.get('/mock-tests', { params });\r\n      return response.data;\r\n    },\r\n    \r\n    getFeatured: async () => {\r\n      const response = await api.get('/mock-tests/featured');\r\n      return response.data;\r\n    },\r\n    \r\n    getById: async (id) => {\r\n      const response = await api.get(`/mock-tests/${id}`);\r\n      return response.data;\r\n    },\r\n    \r\n    create: async (mockTestData) => {\r\n      const response = await api.post('/mock-tests', mockTestData);\r\n      return response.data;\r\n    },\r\n    \r\n    update: async (id, mockTestData) => {\r\n      const response = await api.put(`/mock-tests/${id}`, mockTestData);\r\n      return response.data;\r\n    },\r\n    \r\n    delete: async (id) => {\r\n      const response = await api.delete(`/mock-tests/${id}`);\r\n      return response.data;\r\n    },\r\n    \r\n    togglePublish: async (id, status) => {\r\n      const response = await api.patch(`/mock-tests/${id}/publish`, { published: status });\r\n      return response.data;\r\n    }\r\n  },\r\n  \r\n  // Study Materials endpoints\r\n  studyMaterials: {\r\n    getAll: async (params) => {\r\n      const response = await api.get('/study-materials', { params });\r\n      return response.data;\r\n    },\r\n    \r\n    getFeatured: async () => {\r\n      const response = await api.get('/study-materials/featured');\r\n      return response.data;\r\n    },\r\n    \r\n    getById: async (id) => {\r\n      const response = await api.get(`/study-materials/${id}`);\r\n      return response.data;\r\n    },\r\n    \r\n    create: async (formData) => {\r\n      // For file uploads, use formData\r\n      const response = await api.post('/study-materials', formData, {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data',\r\n        },\r\n      });\r\n      return response.data;\r\n    },\r\n    \r\n    update: async (id, formData) => {\r\n      // For file uploads, use formData\r\n      const response = await api.put(`/study-materials/${id}`, formData, {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data',\r\n        },\r\n      });\r\n      return response.data;\r\n    },\r\n    \r\n    delete: async (id) => {\r\n      const response = await api.delete(`/study-materials/${id}`);\r\n      return response.data;\r\n    },\r\n    \r\n    download: async (id) => {\r\n      const response = await api.get(`/study-materials/${id}/download`, {\r\n        responseType: 'blob'\r\n      });\r\n      return response.data;\r\n    }\r\n  },\r\n  \r\n  // Course endpoints\r\n  courses: {\r\n    getAll: async (params) => {\r\n      const response = await api.get('/courses', { params });\r\n      return response.data;\r\n    },\r\n    \r\n    getFeatured: async () => {\r\n      const response = await api.get('/courses/featured');\r\n      return response.data;\r\n    },\r\n    \r\n    getById: async (id) => {\r\n      const response = await api.get(`/courses/${id}`);\r\n      return response.data;\r\n    },\r\n    \r\n    create: async (courseData) => {\r\n      const response = await api.post('/courses', courseData);\r\n      return response.data;\r\n    },\r\n    \r\n    update: async (id, courseData) => {\r\n      const response = await api.put(`/courses/${id}`, courseData);\r\n      return response.data;\r\n    },\r\n    \r\n    delete: async (id) => {\r\n      const response = await api.delete(`/courses/${id}`);\r\n      return response.data;\r\n    },\r\n    \r\n    togglePublish: async (id, status) => {\r\n      const response = await api.patch(`/courses/${id}/publish`, { published: status });\r\n      return response.data;\r\n    },\r\n    \r\n    // Lesson management\r\n    getLessons: async (courseId) => {\r\n      const response = await api.get(`/courses/${courseId}/lessons`);\r\n      return response.data;\r\n    },\r\n    \r\n    addLesson: async (courseId, lessonData) => {\r\n      const response = await api.post(`/courses/${courseId}/lessons`, lessonData);\r\n      return response.data;\r\n    },\r\n    \r\n    updateLesson: async (courseId, lessonId, lessonData) => {\r\n      const response = await api.put(`/courses/${courseId}/lessons/${lessonId}`, lessonData);\r\n      return response.data;\r\n    },\r\n    \r\n    deleteLesson: async (courseId, lessonId) => {\r\n      const response = await api.delete(`/courses/${courseId}/lessons/${lessonId}`);\r\n      return response.data;\r\n    },\r\n    \r\n    // Enrollment\r\n    enroll: async (courseId) => {\r\n      const response = await api.post(`/courses/${courseId}/enroll`);\r\n      return response.data;\r\n    },\r\n    \r\n    getEnrollments: async () => {\r\n      const response = await api.get('/user/enrollments');\r\n      return response.data;\r\n    }\r\n  },\r\n  \r\n  // Blog endpoints\r\n  blogs: {\r\n    getAll: async (params) => {\r\n      const response = await api.get('/blogs', { params });\r\n      return response.data;\r\n    },\r\n    \r\n    getFeatured: async () => {\r\n      const response = await api.get('/blogs/featured');\r\n      return response.data;\r\n    },\r\n    \r\n    getById: async (id) => {\r\n      const response = await api.get(`/blogs/${id}`);\r\n      return response.data;\r\n    },\r\n    \r\n    getBySlug: async (slug) => {\r\n      const response = await api.get(`/blogs/slug/${slug}`);\r\n      return response.data;\r\n    },\r\n    \r\n    create: async (formData) => {\r\n      // For file uploads (featured image), use formData\r\n      const response = await api.post('/blogs', formData, {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data',\r\n        },\r\n      });\r\n      return response.data;\r\n    },\r\n    \r\n    update: async (id, formData) => {\r\n      // For file uploads (featured image), use formData\r\n      const response = await api.put(`/blogs/${id}`, formData, {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data',\r\n        },\r\n      });\r\n      return response.data;\r\n    },\r\n    \r\n    delete: async (id) => {\r\n      const response = await api.delete(`/blogs/${id}`);\r\n      return response.data;\r\n    },\r\n    \r\n    togglePublish: async (id, status) => {\r\n      const response = await api.patch(`/blogs/${id}/publish`, { published: status });\r\n      return response.data;\r\n    },\r\n    \r\n    toggleFeatured: async (id, status) => {\r\n      const response = await api.patch(`/blogs/${id}/feature`, { featured: status });\r\n      return response.data;\r\n    }\r\n  },\r\n  \r\n  // Article endpoints\r\n  articles: {\r\n    getAll: async (params) => {\r\n      const response = await api.get('/articles', { params });\r\n      return response.data;\r\n    },\r\n    \r\n    getFeatured: async () => {\r\n      const response = await api.get('/articles/featured');\r\n      return response.data;\r\n    },\r\n    \r\n    getById: async (id) => {\r\n      const response = await api.get(`/articles/${id}`);\r\n      return response.data;\r\n    },\r\n    \r\n    getBySlug: async (slug) => {\r\n      const response = await api.get(`/articles/slug/${slug}`);\r\n      return response.data;\r\n    },\r\n    \r\n    create: async (formData) => {\r\n      // For file uploads (featured image), use formData\r\n      const response = await api.post('/articles', formData, {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data',\r\n        },\r\n      });\r\n      return response.data;\r\n    },\r\n    \r\n    update: async (id, formData) => {\r\n      // For file uploads (featured image), use formData\r\n      const response = await api.put(`/articles/${id}`, formData, {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data',\r\n        },\r\n      });\r\n      return response.data;\r\n    },\r\n    \r\n    delete: async (id) => {\r\n      const response = await api.delete(`/articles/${id}`);\r\n      return response.data;\r\n    },\r\n    \r\n    togglePublish: async (id, status) => {\r\n      const response = await api.patch(`/articles/${id}/publish`, { published: status });\r\n      return response.data;\r\n    },\r\n    \r\n    toggleFeatured: async (id, status) => {\r\n      const response = await api.patch(`/articles/${id}/feature`, { featured: status });\r\n      return response.data;\r\n    }\r\n  },\r\n  \r\n  // User management\r\n  users: {\r\n    getAll: async (params) => {\r\n      const response = await api.get('/users', { params });\r\n      return response.data;\r\n    },\r\n    \r\n    getById: async (id) => {\r\n      const response = await api.get(`/users/${id}`);\r\n      return response.data;\r\n    },\r\n    \r\n    create: async (userData) => {\r\n      const response = await api.post('/users', userData);\r\n      return response.data;\r\n    },\r\n    \r\n    update: async (id, userData) => {\r\n      const response = await api.put(`/users/${id}`, userData);\r\n      return response.data;\r\n    },\r\n    \r\n    delete: async (id) => {\r\n      const response = await api.delete(`/users/${id}`);\r\n      return response.data;\r\n    },\r\n    \r\n    updateProfile: async (userData) => {\r\n      const response = await api.put('/users/profile', userData);\r\n      return response.data;\r\n    },\r\n    \r\n    changePassword: async (passwords) => {\r\n      const response = await api.put('/users/change-password', passwords);\r\n      return response.data;\r\n    }\r\n  },\r\n  \r\n  // Dashboard endpoints\r\n  dashboard: {\r\n    getStats: async () => {\r\n      const response = await api.get('/dashboard/stats');\r\n      return response.data;\r\n    },\r\n    \r\n    getAdminStats: async () => {\r\n      const response = await api.get('/dashboard/admin-stats');\r\n      return response.data;\r\n    },\r\n    \r\n    getUserActivity: async () => {\r\n      const response = await api.get('/dashboard/user-activity');\r\n      return response.data;\r\n    },\r\n    \r\n    getRecentContent: async () => {\r\n      const response = await api.get('/dashboard/recent-content');\r\n      return response.data;\r\n    }\r\n  },\r\n  \r\n  // Home page content\r\n  home: {\r\n    getAllContent: async () => {\r\n      try {\r\n        const response = await api.get('/home/content');\r\n        return response.data;\r\n      } catch (error) {\r\n        console.error('Error fetching home content:', error);\r\n        // Return empty content structure on error\r\n        return {\r\n          blogs: [],\r\n          articles: [],\r\n          quizzes: [],\r\n          mockTests: [],\r\n          courses: [],\r\n          studyMaterials: []\r\n        };\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nexport default apiService; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}